
#include "linklist.h"

//Reserve space for a new linklist, set initial variables, and return the linklist
linkList* createlinkList()
{

	linkList *s= (linkList *)malloc(sizeof(linkList));
	s->head =NULL;
	s->tail =NULL;
return s;
}

//Reserve space for new node, set variables and return
node* createNode(data *d)
{

	node *temp =(node *)malloc(sizeof(node));
	temp->next = NULL;
	temp->d = d;

return temp;
}

//Reserve space for a new data struct, set variables and return
data* createData(char *first, char *last, int age, int id) 
{
	data *d = (data *)malloc(sizeof(data));
	strcpy(d->first,first);
	strcpy(d->last,last);
	d->age = age;
	d->id = id;

return(d);
}

//Create a new node, set the data pointer, and add to front of linklist
void addFront(linkList *ll,data *d)
{

	node *temp = createNode(d);

	if(ll->head == NULL)
	{
		ll->head = temp;
		ll->tail = temp;
	}
	else
	{
		temp->next = ll->head;
		ll->head = temp;
	}
}

//Create a new node, set the data pointer, and add to back of linklist
void addBack(linkList *ll,data *d)
{
	node *temp= createNode(d);


	if(ll->head== NULL)
	{
		ll->head = temp;
		ll->tail = temp;
	}
	else
	{
		ll->tail->next = temp;
		ll->tail = temp;
		ll->tail->next = NULL;
	}

}

//Print values in the data structures in the linklist
void printList(linkList *ll)
{
	node *temp = ll->head;
	if(ll->head ==NULL)
	{	
		printf("\nList is empty");
	}
	else if(temp->next == NULL)
	{
		printf("\n%s %s %d %d\n",temp->d->first,temp->d->last,temp->d->age,temp->d->id);
	}
	else{
		while(temp!= NULL)
		{
			printf("\n%s %s %d %d\n",temp->d->first,temp->d->last,temp->d->age,temp->d->id);
			temp = temp->next;
		}
       	   }

}

//Count the number of elements in the linklist and return the count
int listSize(linkList *ll)
{
	int count = 0;
	node *temp = ll->head;
	if(ll->head == NULL)
	{
		count = 0;
	}
	else{
		while(temp!=NULL)
		{

			count++;
			temp= temp->next;
		}
	   }
	return(count);

}


//Remove node from the front of the list and return the data element
data* popFront(linkList *ll)
{
	if(ll->head ==  NULL)
	{
		data *t = NULL;
		return(t);
	}
	else
	{
		node *temp = ll->head;
		data *dat = temp->d;
		temp = temp->next;
		free(ll->head);
		ll->head = temp;
	return(dat);
	}
}


//Remove node from the front of the list and return the data element
data* popBack(linkList *ll)
{
	//float value;
	if(ll->head == NULL)
	{
		data *t = NULL;
		return(t);
	}
	else
	{

	node *temp = ll->head;
	//node *prev = NULL;

	while(temp->next->next!=NULL)
	{
		temp = temp->next;
	}

		data *dat = temp->next->d;
		ll->tail = temp;
		temp->next = NULL;
	return(dat);
	}
}


//Free all memory in the linklist
void cleanList(linkList *ll)
{
	node *temp = NULL;

	while(ll->head !=NULL)
	{
		temp = ll->head;
		free(ll->head->d);
		ll->head = ll->head->next;
		free(temp);
	}
ll->head = NULL;
ll->tail = NULL;
free(ll);

}

//Reverse the elements of the linklist
void reverseList(linkList *ll)
{

	//node *temp = ll->head;
	linkList *new_list = createlinkList();
	data *dat = NULL;
	while(ll->head !=NULL)
	{
		dat = popFront(ll);
		addFront(new_list,dat);	
	}

	ll->head = new_list->head;
	ll->tail = new_list->tail;

}

//Search for element in linkList, if found remove
void searchRemoveFirst(linkList *ll,char *first)
{
	node *prev = NULL;
	node *temp = ll->head;

	if(temp == NULL)
	{
		printf("\no data in list");
	}
	else if(temp->next == NULL && strcmp(temp->d->first,first))
	{
		free(ll->head);
		ll->tail = NULL;
		ll->head = NULL;
	}
	else{
	
		while(temp!=NULL)
		{

			if (strcmp(temp->d->first,first) && (ll->head == temp))
                        {
					prev = temp;
					temp=temp->next;
					free(prev->d);
					free(prev);
                       			ll->head = temp;
					prev =NULL;
					continue;
                        }       
        

			if (strcmp(temp->d->first == first))
			{

					prev->next = temp->next;
					if(temp->next == NULL)
                                        {
                                                ll->tail = prev;
						prev->next = NULL;
						free(temp->d);
						free(temp);
                                                break;
                                        }
					free(temp->d);
					free(temp);
					temp = prev->next;
					continue;
			}	
	
			prev =temp;
			temp =temp->next;
		}
           }

}

//Search for element in linkList, if found remove
void searchRemoveLast(linkList *ll,char *last)
{
	node *prev = NULL;
	node *temp = ll->head;

	if(temp == NULL)
	{
		printf("\no data in list");
	}
	else if(temp->next == NULL && temp->d->val == val)
	{
		free(ll->head);
		ll->tail = NULL;
		ll->head = NULL;
	}
	else{
	
		while(temp!=NULL)
		{

			if (temp->d->val == val && (ll->head == temp))
                        {
					prev = temp;
					temp=temp->next;
					free(prev->d);
					free(prev);
                       			ll->head = temp;
					prev =NULL;
					continue;
                        }       
        

			if (temp->d->val == val)
			{

					prev->next = temp->next;
					if(temp->next == NULL)
                                        {
                                                ll->tail = prev;
						prev->next = NULL;
						free(temp->d);
						free(temp);
                                                break;
                                        }
					free(temp->d);
					free(temp);
					temp = prev->next;
					continue;
			}	
	
			prev =temp;
			temp =temp->next;
		}
           }

}
//Search for element in linkList, if found remove
void searchRemoveAge(linkList *ll,float val)
{
	node *prev = NULL;
	node *temp = ll->head;

	if(temp == NULL)
	{
		printf("\no data in list");
	}
	else if(temp->next == NULL && temp->d->val == val)
	{
		free(ll->head);
		ll->tail = NULL;
		ll->head = NULL;
	}
	else{
	
		while(temp!=NULL)
		{

			if (temp->d->val == val && (ll->head == temp))
                        {
					prev = temp;
					temp=temp->next;
					free(prev->d);
					free(prev);
                       			ll->head = temp;
					prev =NULL;
					continue;
                        }       
        

			if (temp->d->val == val)
			{

					prev->next = temp->next;
					if(temp->next == NULL)
                                        {
                                                ll->tail = prev;
						prev->next = NULL;
						free(temp->d);
						free(temp);
                                                break;
                                        }
					free(temp->d);
					free(temp);
					temp = prev->next;
					continue;
			}	
	
			prev =temp;
			temp =temp->next;
		}
           }

}
//Search for element in linkList, if found remove
void searchRemoveId(linkList *ll,float val)
{
	node *prev = NULL;
	node *temp = ll->head;

	if(temp == NULL)
	{
		printf("\no data in list");
	}
	else if(temp->next == NULL && temp->d->val == val)
	{
		free(ll->head);
		ll->tail = NULL;
		ll->head = NULL;
	}
	else{
	
		while(temp!=NULL)
		{

			if (temp->d->val == val && (ll->head == temp))
                        {
					prev = temp;
					temp=temp->next;
					free(prev->d);
					free(prev);
                       			ll->head = temp;
					prev =NULL;
					continue;
                        }       
        

			if (temp->d->val == val)
			{

					prev->next = temp->next;
					if(temp->next == NULL)
                                        {
                                                ll->tail = prev;
						prev->next = NULL;
						free(temp->d);
						free(temp);
                                                break;
                                        }
					free(temp->d);
					free(temp);
					temp = prev->next;
					continue;
			}	
	
			prev =temp;
			temp =temp->next;
		}
           }

}
//Search for element in linkList, if found remove
void searchRemove(linkList *ll,float val)
{
	node *prev = NULL;
	node *temp = ll->head;

	if(temp == NULL)
	{
		printf("\no data in list");
	}
	else if(temp->next == NULL && temp->d->val == val)
	{
		free(ll->head);
		ll->tail = NULL;
		ll->head = NULL;
	}
	else{
	
		while(temp!=NULL)
		{

			if (temp->d->val == val && (ll->head == temp))
                        {
					prev = temp;
					temp=temp->next;
					free(prev->d);
					free(prev);
                       			ll->head = temp;
					prev =NULL;
					continue;
                        }       
        

			if (temp->d->val == val)
			{

					prev->next = temp->next;
					if(temp->next == NULL)
                                        {
                                                ll->tail = prev;
						prev->next = NULL;
						free(temp->d);
						free(temp);
                                                break;
                                        }
					free(temp->d);
					free(temp);
					temp = prev->next;
					continue;
			}	
	
			prev =temp;
			temp =temp->next;
		}
           }

}

